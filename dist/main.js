(()=>{var n={894:(n,e,r)=>{"use strict";r.d(e,{Z:()=>s});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([n.id,"/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}","",{version:3,sources:["webpack://./src/styles/cssReset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}"],sourceRoot:""}]);const s=a},383:(n,e,r)=>{"use strict";r.d(e,{Z:()=>s});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([n.id,".d-flex {\r\n  display: flex;\r\n}\r\n  \r\n.justify-content-between {\r\n  justify-content: space-between;\r\n}\r\n\r\n.m-1 {\r\n  margin: 16px;\r\n}\r\n\r\n.my-1 {\r\n  margin-top: 8px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.mr-1 {\r\n  margin-right: 16px;\r\n}\r\n\r\n.m-2 {\r\n  margin: 8px;\r\n}\r\n\r\n.my-2 {\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.mr-2 {\r\n  margin-right: 8px;\r\n}\r\n\r\n.row {\r\n  display: flex;\r\n}\r\n\r\n.d-none {\r\n  display: none;\r\n}","",{version:3,sources:["webpack://./src/styles/helper.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf",sourcesContent:[".d-flex {\r\n  display: flex;\r\n}\r\n  \r\n.justify-content-between {\r\n  justify-content: space-between;\r\n}\r\n\r\n.m-1 {\r\n  margin: 16px;\r\n}\r\n\r\n.my-1 {\r\n  margin-top: 8px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.mr-1 {\r\n  margin-right: 16px;\r\n}\r\n\r\n.m-2 {\r\n  margin: 8px;\r\n}\r\n\r\n.my-2 {\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.mr-2 {\r\n  margin-right: 8px;\r\n}\r\n\r\n.row {\r\n  display: flex;\r\n}\r\n\r\n.d-none {\r\n  display: none;\r\n}"],sourceRoot:""}]);const s=a},890:(n,e,r)=>{"use strict";r.d(e,{Z:()=>s});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([n.id,"h1 {\r\n  font-size: 32px;\r\n  font-weight: 700;\r\n}\r\n\r\nh4 {\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  width: 80%;\r\n  height: 100%;\r\n  margin: auto;\r\n}\r\n\r\n.sidebar {\r\n  width: 30%;\r\n  height: 100%;\r\n  padding: 30px;\r\n  background: rgba(20, 30, 40, .4);\r\n}\r\n\r\n.content {\r\n  width: 70%;\r\n  padding: 30px;\r\n  padding-left: 60px;\r\n}\r\n\r\n.project-item {\r\n  border: 1px solid gray;\r\n  padding: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.task {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 55%;\r\n  margin: 10px 0;\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n}\r\n\r\n.modal {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n  overflow: auto;\r\n  padding-top: 50px;\r\n  background: rgba(0, 0, 0, .4);\r\n}\r\n\r\n.modal .modal-content {\r\n  width: 30%;\r\n  background: white;\r\n  margin: auto;\r\n  padding: 30px;\r\n}\r\n\r\n.modal .modal-content .close {\r\n  float: right;\r\n  margin-top: -20px;\r\n}\r\n\r\n.modal .modal-content .label {\r\n  width: 80px;\r\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,UAAU;EACV,YAAY;EACZ,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE,UAAU;EACV,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,UAAU;EACV,cAAc;EACd,sBAAsB;EACtB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,UAAU;EACV,cAAc;EACd,iBAAiB;EACjB,6BAA6B;AAC/B;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,WAAW;AACb",sourcesContent:["h1 {\r\n  font-size: 32px;\r\n  font-weight: 700;\r\n}\r\n\r\nh4 {\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  width: 80%;\r\n  height: 100%;\r\n  margin: auto;\r\n}\r\n\r\n.sidebar {\r\n  width: 30%;\r\n  height: 100%;\r\n  padding: 30px;\r\n  background: rgba(20, 30, 40, .4);\r\n}\r\n\r\n.content {\r\n  width: 70%;\r\n  padding: 30px;\r\n  padding-left: 60px;\r\n}\r\n\r\n.project-item {\r\n  border: 1px solid gray;\r\n  padding: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.task {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 55%;\r\n  margin: 10px 0;\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n}\r\n\r\n.modal {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n  overflow: auto;\r\n  padding-top: 50px;\r\n  background: rgba(0, 0, 0, .4);\r\n}\r\n\r\n.modal .modal-content {\r\n  width: 30%;\r\n  background: white;\r\n  margin: auto;\r\n  padding: 30px;\r\n}\r\n\r\n.modal .modal-content .close {\r\n  float: right;\r\n  margin-top: -20px;\r\n}\r\n\r\n.modal .modal-content .label {\r\n  width: 80px;\r\n}"],sourceRoot:""}]);const s=a},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);t&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:n=>{"use strict";n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},300:function(n,e,r){var t,o;!function(i){"use strict";var a,s=null;"object"==typeof pubsub?s=pubsub:"object"==typeof r.g&&"object"==typeof r.g.pubsubConfig&&(s=r.g.pubsubConfig),a=new function n(e){var r={},t={separator:e&&e.separator?e.separator:"/",recurrent:!(!e||"boolean"!=typeof e.recurrent)&&e.recurrent,depth:e&&"number"==typeof e.depth?e.depth:null,async:!(!e||"boolean"!=typeof e.async)&&e.async,context:e&&e.context?e.context:null,log:!(!e||!e.log)&&e.log};function o(n,e){var r=0,t=n.length;for(r=0;r<t;r++)e(r,n[r])}function i(n){return Array.isArray?Array.isArray(n):"[object Array]"===Object.prototype.toString.call(n)}function a(n,e,r){if(r="boolean"==typeof r?r:t.async,n.length){var i=n.slice();o(i,(function(n,t){"object"==typeof t&&i.hasOwnProperty(n)&&(r?setTimeout((function(){t.callback.apply(t.context,e)}),4):t.callback.apply(t.context,e))}))}}function s(n,e,r,t){var o=(r=r.slice()).shift(),i=t.depth,c=t.async,l=t.partsLength,u=t.recurrent,d=l-r.length;if(o)if(void 0!==n["*"]&&s(n["*"],e,r,t),"*"===o&&function(n,e){var r;for(r in n)"_"!==r[0]&&n.hasOwnProperty(r)&&a(n[r]._events,e)}(n,e),void 0!==n[o]){if(n=n[o],!0===u&&"number"!=typeof i){if(a(n._events,e,c),0===r.length)return}else!0===u&&"number"==typeof i&&d>=l-i&&a(n._events,e,c);s(n,e,r,t)}else t.log&&console.warn("There is no "+t.nsString+" subscription");else a(n._events,e,c)}function c(n,e,o){var i,a,s=n.split(t.separator),c=o&&void 0!==o.context?o.context:t.context,l=0;for(c||(c=e),i=r,l=0;l<s.length;l+=1)void 0===i[s[l]]&&(i[s[l]]={},i[s[l]]._events=[]),i=i[s[l]];return a={callback:e,context:c},i._events.push(a),{namespace:s.join(t.separator),event:a}}function l(n){if(null==n)return null;var e,i=n.namespace,a=n.event,s=i.split(t.separator),c=0;for(e=r,c=0;c<s.length;c+=1){if(void 0===e[s[c]])return t.log&&console.error("There is no "+i+" subscription"),null;e=e[s[c]]}o(e._events,(function(n){e._events[n]===a&&e._events.splice(n,1)}))}return{publish:function(n,e,o){var i=n.split(t.separator),a="object"==typeof o&&o.recurrent?o.recurrent:t.recurrent,c="object"==typeof o&&o.depth?o.depth:t.depth,l="object"==typeof o&&o.async?o.async:t.async,u=i.length;i.length?s(r,e,i,{recurrent:a,depth:c,async:l,parts:i,nsString:n,partsLength:u}):t.log&&console.error("Wrong namespace provided "+n)},subscribe:function(n,e,r){var t=this,a=[];if(i(e))o(e,(function(o){var i=e[o];a=a.concat(t.subscribe(n,i,r))}));else{if(!i(n))return c.apply(t,arguments);o(n,(function(o){var i=n[o];a=a.concat(t.subscribe(i,e,r))}))}return a},subscribeOnce:function(n,e,r){var t=this,o=null;return o=t.subscribe(n,(function(){var n=this;e.apply(n,arguments),t.unsubscribe(o)}),r),o},unsubscribe:function(n){var e=this;i(n)?o(n,(function(r){var t=n[r];l.apply(e,[t])})):l.apply(e,arguments)},newInstance:function(e){return new n(e)}}}(s),void 0===(o="function"==typeof(t=a)?t.call(e,r,e,n):t)||(n.exports=o),n.exports&&(n.exports=a),"object"==typeof window&&(window.pubsub=a,window!==i&&(i.pubsub=a))}(this)},379:n=>{"use strict";var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],l=t.base?c[0]+t.base:c[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var A=r(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var f=o(p,t);t.byIndex=s,e.splice(s,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var i=t(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=r(i[a]);e[s].references--}for(var c=t(n,o),l=0;l<i.length;l++){var u=r(i[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=c}}},569:n=>{"use strict";var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{"use strict";n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={id:t,exports:{}};return n[t].call(i.exports,i,i.exports,r),i.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.nc=void 0,(()=>{"use strict";var n=r(379),e=r.n(n),t=r(795),o=r.n(t),i=r(569),a=r.n(i),s=r(565),c=r.n(s),l=r(216),u=r.n(l),d=r(589),A=r.n(d),p=r(894),f={};f.styleTagTransform=A(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=u(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;var b=r(383),m={};m.styleTagTransform=A(),m.setAttributes=c(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=u(),e()(b.Z,m),b.Z&&b.Z.locals&&b.Z.locals;var h=r(890),g={};g.styleTagTransform=A(),g.setAttributes=c(),g.insert=a().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=u(),e()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;const y=JSON.parse(localStorage.getItem("projects"))||[];let v=y[0];function C(){return y}function E(){return v}function x(n){v=n}var k=r(300),w=r.n(k);function B(n){const e=document.querySelector("#projects-container");if(e.innerHTML="",n.length)for(let r in n){const t=`\n    <div class="my-1 project-item">\n      <h4>${n[r].title}</h4>\n    </div>`,o=(new DOMParser).parseFromString(t,"text/html");o.body.firstChild.addEventListener("click",(()=>w().publish("select/project",[n[r]]))),e.appendChild(o.body)}else e.innerHTML='<h4 class="my-2">there is no project to show</h4>'}function j(n){const e=document.querySelector("#task-container");if(e.innerText="",n&&n.length)for(let r of n){const n=`\n      <div class="task">\n        <div>\n          <input type="checkbox">\n          <label for="">${r.title}</label>\n        </div>\n\n        <div>\n          <button class="edit-task-button">edit</button>\n          <button class="delete-task-button">delete</button>\n        </div>\n      </div>`,t=(new DOMParser).parseFromString(n,"text/html"),o=t.querySelector(".delete-task-button"),i=t.querySelector(".edit-task-button");o.addEventListener("click",(()=>w().publish("remove/task",[r]))),i.addEventListener("click",(()=>w().publish("open/editTask",[r]))),e.appendChild(t.body)}else e.innerHTML='<h4 class="my-2">there is no task to show</h4>'}function S(n){document.querySelector(".project-title").innerText=n}const{openModal:q,closeModal:T}=function(){const n=document.querySelector(".modal");return window.onclick=function(e){e.target===n&&(n.style.display="none")},{closeModal:function(){n.style.display="none"},openModal:function(){n.style.display="block"}}}(),{getTaskFormData:P,clearTaskFormData:D,setEditTaskFormData:M}=function(){const n={title:document.querySelector("#title"),description:document.querySelector("#description"),dueDate:document.querySelector("#due-date"),checkedPriority:()=>document.querySelector('input[name="priority"]:checked'),highPriority:document.querySelector("#high-priority"),lowPriority:document.querySelector("#low-priority"),mediumPriority:document.querySelector("#medium-priority"),submitButton:document.querySelector("#add-task-button")};return{getTaskFormData:function(){return{title:n.title.value,description:n.description.value,dueDate:n.dueDate.value,priority:n.checkedPriority().value}},clearTaskFormData:function(){n.title.value="",n.description.value="",n.dueDate.value="",n.lowPriority.checked=!0,n.submitButton.innerText="add task"},setEditTaskFormData:function(e){n.title.value=e.title,n.description.value=e.description,n.dueDate.value=e.dueDate,"medium"===e.priority?n.mediumPriority.checked=!0:"high"===e.priority&&(n.highPriority.checked=!0),n.submitButton.innerText="edit task"}}}(),{getProjectInputValue:L,clearProjectInputValue:Z}=function(){const n=document.querySelector("#project-input");return{getProjectInputValue:function(){return n.value},clearProjectInputValue:function(){n.value=""}}}();let Y=!1,U={};function I(){if(function(){const n=y.findIndex((n=>n===v));y.splice(n,1)}(),B(C()),!C().length)return x(null),j(null),void S("ther is no project");x(C()[0]),S(E().title),j(E().tasks),F()}function O(){const n=L();var e;n&&(e=n,y.push({title:e,tasks:[]}),Z(),B(C()),F())}function _(){const n=P();Y?(function(n,e,r){let t=n.find((n=>e===n));t&&(t.title=r.title,t.description=r.description,t.dueDate=r.dueDate,t.priority=r.priority)}(E().tasks,U,n),Y=!1,U={}):function(n,e){n.push({title:e.title,description:e.description,dueDate:e.dueDate,priority:e.priority})}(E().tasks,n),T(),j(E().tasks),F()}function F(){localStorage.setItem("projects",JSON.stringify(C()))}w().subscribe("select/project",(function(n){x(n),j(E().tasks),S(E().title)})),w().subscribe("remove/task",(function(n){(function(n,e){let r=n.tasks.findIndex((n=>n===e));n.tasks.splice(r,1)})(E(),n),j(E().tasks)})),w().subscribe("open/editTask",(function(n){Y=!0,U=n,M(n),q()})),function(){const n=document.querySelector("#addProject"),e=document.querySelector(".openAddTaskModal"),r=document.querySelector("#add-task-button"),t=document.querySelector(".delete-project");n.addEventListener("click",O),e.addEventListener("click",(()=>{D(),q()})),r.addEventListener("click",_),t.addEventListener("click",I)}(),C().length&&(B(C()),j(C()[0].tasks),S(C()[0].title))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,